package troubleticket.modules;

import java.sql.Timestamp;
import java.util.Optional;
import java.util.Random;
import java.util.regex.Pattern;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import net.synedra.validatorfx.Validator;
import troubleticket.Session;
import troubleticket.daos.HelptopicDaoSql;
import troubleticket.daos.SlaDaoSql;
import troubleticket.daos.StaffDaoSql;
import troubleticket.daos.TicketDaoSql;
import troubleticket.daos.TicketPriorityDaoSql;
import troubleticket.daos.TicketStatusDaoSql;
import troubleticket.daos.UserDaoSql;
import troubleticket.models.Ticket;

/**
 * GUI Module TicketEditionModule manages the edition or creation of tickets
 *
 */
public class TicketEditionModule implements VBoxModuleI {

	private Session session = Session.getInstance();
	private VBox vBox = null;
	private GridPane form;
	private TextField idTextField = new TextField();
	private TextField numberTextField = new TextField();
	private UserComboBox userCombo = new UserComboBox();
	private StaffComboBox staffCombo = new StaffComboBox();
	private SlaComboBox slaCombo = new SlaComboBox();
	private HelptopicComboBox helptopicCombo = new HelptopicComboBox();
	private TicketStatusComboBox statusCombo = new TicketStatusComboBox();
	private TicketPriorityComboBox priorityCombo = new TicketPriorityComboBox();
	private DateTimePicker dueDateTimePicker = new DateTimePicker();
	private TextField subjectTextField = new TextField();
	private TextArea bodyTextArea = new TextArea();
	private Button btnSubmit = new Button("Submit Ticket");
	private Button btnClose = new Button("Return to Tickets");
	private Validator validator = new Validator();

	/**
	 * Starts the module
	 */
	public VBox start() {
		paintForm();
		return vBox;
	}

	/**
	 * Paints the GUI interface
	 * @return VBox container with the GUI needed
	 */
	private VBox paintForm() {

		form = new GridPane();

		int row = 0;
		form.setAlignment(Pos.CENTER);
		form.setHgap(10);
		form.setVgap(10);
		form.setPadding(new Insets(30, 30, 30, 30));

		Text formTitle = new Text("Ticket Edition Module");
		formTitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
		form.add(formTitle, 0, row, 2, 1);

		// Ticket ID
		row++;
		Label idLabel = new Label("System ID:");
		idTextField.setText("<New Ticket, not created yet>");
		idTextField.setMaxWidth(200);
		idTextField.setEditable(false);
		idTextField.setStyle("-fx-control-inner-background:#6a6a6a");
		form.add(idLabel, 0, row);
		form.add(idTextField, 1, row);

		// Number (blocked, autogenerated)
		row++;
		Random rnd = new Random();
		Integer n = 1000000 + rnd.nextInt(9000000);
		Label numberLabel = new Label("Generated number:");
		form.add(numberLabel, 0, row);
		numberTextField.setText(n.toString());
		numberTextField.setMaxWidth(200);
		numberTextField.setEditable(false);
		numberTextField.setStyle("-fx-control-inner-background: #6a6a6a");
		form.add(numberTextField, 1, row);

		// Users Combobox
		row++;
		userCombo.setValue(null);
		userCombo.setAll();
		Label usersLabel = new Label("User:");
		form.add(usersLabel, 0, row);
		form.add(userCombo.getComboBox(), 1, row);

		// Staff Combobox
		row++;
		staffCombo.setValue(null);
		staffCombo.setAll();
		Label staffLabel = new Label("Staff member:");
		form.add(staffLabel, 0, row);
		form.add(staffCombo.getComboBox(), 1, row);

		// Sla Combobox
		row++;
		slaCombo.setValue(null);
		slaCombo.setAll();
		Label slaLabel = new Label("Sla:");
		form.add(slaLabel, 0, row);
		form.add(slaCombo.getComboBox(), 1, row);

		// Helptopic Combobox
		row++;
		helptopicCombo.setValue(null);
		helptopicCombo.setAll();
		Label helptopicLabel = new Label("Helptopic:");
		form.add(helptopicLabel, 0, row);
		form.add(helptopicCombo.getComboBox(), 1, row);

		// Ticket Priority Combobox
		row++;
		statusCombo.setValue(null);
		statusCombo.setAll();
		Label ticketStatusLabel = new Label("Status:");
		form.add(ticketStatusLabel, 0, row);
		form.add(statusCombo.getComboBox(), 1, row);

		// Ticket Priority Combobox
		row++;
		priorityCombo.setValue(null);
		priorityCombo.setAll();
		Label ticketPriorityLabel = new Label("Priority:");
		form.add(ticketPriorityLabel, 0, row);
		form.add(priorityCombo.getComboBox(), 1, row);

		// Duedate Date Picker
		row++;
		Label duedateLabel = new Label("Due date:");
		form.add(duedateLabel, 0, row);
		form.add(dueDateTimePicker, 1, row);

		// Subject (Mandatory)
		row++;
		Label subjectLabel = new Label("Subject:");
		form.add(subjectLabel, 0, row);
		form.add(subjectTextField, 1, row);

		// Body (mandatory)
		row++;
		Label bodyLabel = new Label("Body:");
		form.add(bodyLabel, 0, row);
		form.add(bodyTextArea, 1, row);

		// Tooltip and Submit button
		row++;
		HBox hbBtn = new HBox(10);
		hbBtn.setAlignment(Pos.BOTTOM_RIGHT);
		hbBtn.getChildren().addAll(btnClose, btnSubmit);
		btnClose.setOnAction(event -> returnToManager());
		btnSubmit.setOnAction(event -> submitForm());

		form.add(hbBtn, 1, row);
		vBox = new VBox(form);
		return vBox;
	}

	/**
	 * Submits form to database
	 */
	private void submitForm() {

		validator.createCheck().dependsOn("notEmptyNumber", numberTextField.textProperty()).withMethod(c -> {
			if (numberTextField.getText().trim() == "") {
				c.error("Number cannot be empty");
			}
		}).decorates(numberTextField).immediate();

		validator.createCheck().dependsOn("notEmptyUser", userCombo.getComboBox().selectionModelProperty())
				.withMethod(c -> {
					if (userCombo.getComboBox().getValue() == null) {
						c.error("User cannot be empty");
					}
				}).decorates(userCombo.getComboBox()).immediate();

		validator.createCheck().dependsOn("notEmptyStaff", staffCombo.getComboBox().selectionModelProperty())
				.withMethod(c -> {
					if (staffCombo.getComboBox().getValue() == null) {
						c.error("Staff member cannot be empty");
					}
				}).decorates(staffCombo.getComboBox()).immediate();

		validator.createCheck().dependsOn("notEmptySla", slaCombo.getComboBox().selectionModelProperty())
				.withMethod(c -> {
					if (slaCombo.getComboBox().getValue() == null) {
						c.error("Sla cannot be empty");
					}
				}).decorates(slaCombo.getComboBox()).immediate();

		validator.createCheck().dependsOn("notEmptyHelptopic", helptopicCombo.getComboBox().selectionModelProperty())
				.withMethod(c -> {
					if (helptopicCombo.getComboBox().getValue() == null) {
						c.error("Help topic cannot be empty");
					}
				}).decorates(helptopicCombo.getComboBox()).immediate();

		validator.createCheck().dependsOn("notEmptyStatus", statusCombo.getComboBox().selectionModelProperty())
				.withMethod(c -> {
					if (statusCombo.getComboBox().getValue() == null) {
						c.error("Status cannot be empty");
					}
				}).decorates(statusCombo.getComboBox()).immediate();

		validator.createCheck().dependsOn("notEmptyPriority", priorityCombo.getComboBox().selectionModelProperty())
				.withMethod(c -> {
					if (priorityCombo.getComboBox().getValue() == null) {
						c.error("Priority cannot be empty");
					}
				}).decorates(priorityCombo.getComboBox()).immediate();
		
		validator.createCheck().dependsOn("notEmptyDueDate", dueDateTimePicker.valueProperty()).withMethod(c -> {
			if (dueDateTimePicker.getValue() == null) {
				c.error("Due date cannot be empty");
			} else {
				String dateTime = dueDateTimePicker.getDateTimeValue().toString().replace("T", " ");
				if (!Pattern.matches("[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]$", dateTime))
					c.error("The format needs to be yyyy-mm-dd HH:mm");
			}
		}).decorates(dueDateTimePicker).immediate();
		
		validator.createCheck().dependsOn("notEmptySubject", subjectTextField.textProperty()).withMethod(c -> {
			if (subjectTextField.getText().trim() == "") {
				c.error("Subject cannot be empty");
			}
		}).decorates(subjectTextField).immediate();

		validator.createCheck().dependsOn("notEmptyBody", bodyTextArea.textProperty()).withMethod(c -> {
			if (bodyTextArea.getText() == null || bodyTextArea.getText() == "") {
				c.error("Body cannot be empty");
			}
		}).decorates(bodyTextArea).immediate();

		if (validator.validate()) {
			// DAOS
			TicketDaoSql ticketDAO = new TicketDaoSql();
			UserDaoSql userDAO = new UserDaoSql();
			StaffDaoSql staffDAO = new StaffDaoSql();
			SlaDaoSql slaDAO = new SlaDaoSql();
			HelptopicDaoSql helptopicDAO = new HelptopicDaoSql();
			TicketStatusDaoSql statusDAO = new TicketStatusDaoSql();
			TicketPriorityDaoSql priorityDAO = new TicketPriorityDaoSql();

			// Form values when are validated
			Integer id = (!idTextField.getText().contains("<")) ? Integer.parseInt(idTextField.getText()) : null;
			String number = numberTextField.getText();

			String userComboText = userCombo.getComboBox().getValue();
			String userName = userComboText.substring(userComboText.indexOf("(") + 1, userComboText.indexOf(")"));
			Integer userId = userDAO.getByName(userName).getId();

			String staffComboText = staffCombo.getComboBox().getValue();
			String staffName = staffComboText.substring(staffComboText.indexOf("(") + 1, staffComboText.indexOf(")"));
			Integer staffId = staffDAO.getByName(staffName).getId();

			String slaComboText = slaCombo.getComboBox().getValue();
			String slaName = slaComboText.trim();
			Integer slaId = slaDAO.getByName(slaName).getId();

			String helptopicComboText = helptopicCombo.getComboBox().getValue();
			String helptopicName = helptopicComboText.trim();
			Integer helptopicId = helptopicDAO.getByName(helptopicName).getId();

			String statusComboText = statusCombo.getComboBox().getValue();
			String statusName = statusComboText.trim();
			Integer statusId = statusDAO.getByName(statusName).getId();

			String priorityComboText = priorityCombo.getComboBox().getValue();
			String priorityName = priorityComboText.trim();
			Integer priorityId = priorityDAO.getByName(priorityName).getId();

			String subject = subjectTextField.getText();
			String body = bodyTextArea.getText();

			//Timestamp duedate = Timestamp.valueOf(dueDateDatePicker.getValue().atStartOfDay());
			Timestamp duedate = Timestamp.valueOf(dueDateTimePicker.getDateTimeValue());
			String feedback = "";
			boolean answerUpdate = false;
			if (id == null) {
				answerUpdate = ticketDAO.insert(
						number, 
						userId, 
						staffId, 
						slaId, 
						statusId, 
						helptopicId, 
						priorityId,
						subject, 
						body, 
						duedate
					);
				if (answerUpdate)
					feedback = "Ticket created successfully";
				else
					feedback = "Ticket could not be created";
			} else {
				answerUpdate = ticketDAO.update(
						id, 
						number, 
						userId, 
						staffId, 
						slaId, 
						statusId, 
						helptopicId, 
						priorityId,
						subject, 
						body, 
						duedate
					);
				if (answerUpdate)
					feedback = "Ticket updated successfully";
				else
					feedback = "Ticket could not be updated";
			}
			paintInfoMessage(AlertType.INFORMATION, "Database answer", feedback);
		}
	}

	/**
	 * Paints a dialog
	 * @param alertType
	 * @param title
	 * @param body
	 */
	private void paintInfoMessage(AlertType alertType, String title, String body) {
		Alert alert = new Alert(alertType);
		alert.setTitle(title);
		alert.setHeaderText(null);
		alert.setContentText(body);
		Optional<ButtonType> result = alert.showAndWait();
		if(!result.isPresent()) {
			returnToManager();
		} else if(result.get() == ButtonType.OK) {
			returnToManager();
		} else if(result.get() == ButtonType.CANCEL) {
			returnToManager();
		}
	}

	/**
	 * Goes back to this module
	 */
	private void returnToManager() {
		this.session.getApp().getTabPane().getSelectionModel().select(0);
		this.session.getApp().getTicketManagerModule().paintTicketsTable();
	}

	/**
	 * Paints data inside form field
	 * @param ticketId
	 */
	public void paintTicketInForm(int ticketId) {
		TicketDaoSql ticketDAO = new TicketDaoSql();
		Ticket ticket = ticketDAO.get(ticketId);
		if (ticket == null)
			return;
		idTextField.setText(ticket.getId() + "");
		numberTextField.setText(ticket.getNumber() + "");
		userCombo.setValue(ticket.getUsername());
		staffCombo.setValue(ticket.getAgentFullname());
		slaCombo.setValue(ticket.getSla());
		helptopicCombo.setValue(ticket.getHelpTopic());
		statusCombo.setValue(ticket.getStatus());
		priorityCombo.setValue(ticket.getPriority());
		dueDateTimePicker.setDateTimeValue(ticket.getDuedate().toLocalDateTime());
		subjectTextField.setText(ticket.getSubject());
		bodyTextArea.setText(ticket.getBody());
	}

}
